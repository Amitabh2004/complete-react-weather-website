{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amitabh\\\\Desktop\\\\React-Projects\\\\react-accuweather\\\\src\\\\HomeComponents\\\\SearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GEO_API_URL = \"https://wft-geo-db.p.rapidapi.com/v1/geo\";\nconst GEO_API_OPTIONS = {\n  method: \"GET\",\n  headers: {\n    \"X-RapidAPI-Key\": \"4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917\",\n    \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\"\n  }\n};\nexport default function SearchBar({\n  handleCityNameChange\n}) {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [error, setError] = useState(\"\");\n  const handleInputChange = async input => {\n    setQuery(input);\n    if (input.length < 1) {\n      setSuggestions([]);\n      return;\n    }\n    try {\n      const response = await axios.get(`${GEO_API_URL}/cities?minPopulation=1000&namePrefix=${input}`, GEO_API_OPTIONS);\n      const cities = response.data.data.map(city => ({\n        name: city.name,\n        countryCode: city.countryCode,\n        latitude: city.latitude,\n        longitude: city.longitude\n      }));\n      if (cities.length === 0) console.log(\"NO citites found\");\n      setSuggestions(cities);\n    } catch (error) {\n      console.log(\"Error fetching city suggestions: \", error);\n    }\n  };\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\" && query.length > 0 && suggestions.length > 0) {\n      const selectedCity = suggestions[0]; // Assuming the first suggestion is selected\n      handleCityNameChange(selectedCity);\n      setQuery(\"\"); // Clear the input after selecting a suggestion\n      setSuggestions([]); // Clear suggestions\n    }\n  };\n  const handleSuggestionClick = (name, latitude, longitude) => {\n    setQuery(name);\n    setSuggestions([]);\n    handleCityNameChange({\n      name,\n      latitude,\n      longitude\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"searchbar-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: e => handleInputChange(e.target.value),\n      onKeyPress: handleKeyPress,\n      placeholder: \"Search for cities\",\n      className: \"search-bar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-div\",\n      children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSuggestionClick(suggestion.name, suggestion.latitude, suggestion.longitude),\n        className: \"suggestion-list-element\",\n        children: [suggestion.name, \", \", suggestion.countryCode]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchBar, \"hhT2Zw/I7oT48OkGMdnDTeevnaw=\");\n_c = SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","GEO_API_URL","GEO_API_OPTIONS","method","headers","SearchBar","handleCityNameChange","_s","query","setQuery","suggestions","setSuggestions","error","setError","handleInputChange","input","length","response","get","cities","data","map","city","name","countryCode","latitude","longitude","console","log","handleKeyPress","event","key","selectedCity","handleSuggestionClick","className","children","type","value","onChange","e","target","onKeyPress","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","suggestion","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Amitabh/Desktop/React-Projects/react-accuweather/src/HomeComponents/SearchBar.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst GEO_API_URL = \"https://wft-geo-db.p.rapidapi.com/v1/geo\";\r\nconst GEO_API_OPTIONS = {\r\n  method: \"GET\",\r\n  headers: {\r\n    \"X-RapidAPI-Key\": \"4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917\",\r\n    \"X-RapidAPI-Host\": \"wft-geo-db.p.rapidapi.com\",\r\n  },\r\n};\r\n\r\nexport default function SearchBar({ handleCityNameChange }) {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [error,setError] = useState(\"\");\r\n  const handleInputChange = async (input) => {\r\n    setQuery(input);\r\n    if (input.length < 1) {\r\n      setSuggestions([]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `${GEO_API_URL}/cities?minPopulation=1000&namePrefix=${input}`,\r\n        GEO_API_OPTIONS\r\n      );\r\n      \r\n      const cities = response.data.data.map((city) => ({\r\n        name: city.name,\r\n        countryCode: city.countryCode,\r\n        latitude: city.latitude,\r\n        longitude: city.longitude,\r\n      }));\r\n      if(cities.length===0) console.log(\"NO citites found\");\r\n      setSuggestions(cities);\r\n    } catch (error) {\r\n      console.log(\"Error fetching city suggestions: \", error);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && query.length > 0 && suggestions.length > 0) {\r\n      const selectedCity = suggestions[0]; // Assuming the first suggestion is selected\r\n      handleCityNameChange(selectedCity);\r\n      setQuery(\"\"); // Clear the input after selecting a suggestion\r\n      setSuggestions([]); // Clear suggestions\r\n    }\r\n  };\r\n\r\n  const handleSuggestionClick = (name, latitude, longitude) => {\r\n    setQuery(name);\r\n    setSuggestions([]);\r\n    handleCityNameChange({ name, latitude, longitude });\r\n  };\r\n\r\n  return (\r\n    <div className=\"searchbar-div\">\r\n      <input\r\n        type=\"text\"\r\n        value={query}\r\n        onChange={(e) => handleInputChange(e.target.value)}\r\n        onKeyPress={handleKeyPress}\r\n        placeholder=\"Search for cities\"\r\n        className=\"search-bar\"\r\n      />\r\n\r\n      {suggestions.length > 0 && (\r\n        <ul className=\"list-div\">\r\n          {suggestions.map((suggestion, index) => (\r\n            <li\r\n              key={index}\r\n              onClick={() =>\r\n                handleSuggestionClick(\r\n                  suggestion.name,\r\n                  suggestion.latitude,\r\n                  suggestion.longitude\r\n                )\r\n              }\r\n              className=\"suggestion-list-element\"\r\n            >\r\n              {suggestion.name}, {suggestion.countryCode}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}