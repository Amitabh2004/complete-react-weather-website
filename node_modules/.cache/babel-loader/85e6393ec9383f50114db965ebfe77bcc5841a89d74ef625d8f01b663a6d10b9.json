{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nasync function fetchIPLocation(ip) {\n  try {\n    const response = await axios.get(`http://ip-api.com/json/${ip}`);\n    return response.data;\n  } catch (error) {\n    console.log(\"Error fetching IP location data: \", error);\n    return null;\n  }\n}\nconst IPLocation = () => {\n  _s();\n  const [ip, setIP] = useState('');\n  const [locationData, setLocationData] = useState(null);\n  useEffect(() => {\n    //Fetching the IP address of the user's machine\n    const fetchIP = async () => {\n      try {\n        const response = await axios.get('https://api.ipify.org?format=json');\n        setIP(response.data.ip);\n      } catch (error) {\n        console.log('Error fetching IP address: ', error);\n      }\n    };\n    fetchIP();\n  }, []);\n  useEffect(() => {\n    //Fetching Location on basis of IP address\n    if (ip) {\n      const fetchLocation = async () => {\n        const data = await fetchIPLocation(ip);\n        setLocationData(data);\n      };\n      fetchLocation();\n    }\n  }, [ip]);\n  return {\n    locationData\n  };\n};\n_s(IPLocation, \"ofLM/Gl9rqByn6QsJ9Nsp8+0/HM=\");\n_c = IPLocation;\nexport default IPLocation;\nvar _c;\n$RefreshReg$(_c, \"IPLocation\");","map":{"version":3,"names":["React","useState","useEffect","fetchIPLocation","ip","response","axios","get","data","error","console","log","IPLocation","_s","setIP","locationData","setLocationData","fetchIP","fetchLocation","_c","$RefreshReg$"],"sources":["C:/Users/Amitabh/Desktop/React-Projects/react-accuweather/src/API'S/IPLocation .js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\nasync function fetchIPLocation(ip) {\r\n  try {\r\n    const response = await axios.get(`http://ip-api.com/json/${ip}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(\"Error fetching IP location data: \", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nconst IPLocation = () => {\r\n    const [ip,setIP] = useState('');\r\n    const [locationData,setLocationData] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        //Fetching the IP address of the user's machine\r\n        const fetchIP = async () => {\r\n            try {\r\n                const response = await axios.get('https://api.ipify.org?format=json');\r\n                setIP(response.data.ip);\r\n            } catch(error){\r\n                console.log('Error fetching IP address: ',error);\r\n            }\r\n        };\r\n        fetchIP();\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        //Fetching Location on basis of IP address\r\n        if(ip){\r\n            const fetchLocation = async () =>{\r\n                const data = await fetchIPLocation(ip);\r\n                setLocationData(data);\r\n            };\r\n            fetchLocation();\r\n        }\r\n    },[ip]);\r\n\r\n    return {locationData};\r\n\r\n}\r\nexport default IPLocation;\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAEhD,eAAeC,eAAeA,CAACC,EAAE,EAAE;EACjC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,0BAA0BH,EAAE,EAAE,CAAC;IAChE,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,KAAK,CAAC;IACvD,OAAO,IAAI;EACb;AACF;AAEA,MAAMG,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACT,EAAE,EAACU,KAAK,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC/B,MAAM,CAACc,YAAY,EAACC,eAAe,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAErDC,SAAS,CAAC,MAAI;IACV;IACA,MAAMe,OAAO,GAAG,MAAAA,CAAA,KAAY;MACxB,IAAI;QACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,mCAAmC,CAAC;QACrEO,KAAK,CAACT,QAAQ,CAACG,IAAI,CAACJ,EAAE,CAAC;MAC3B,CAAC,CAAC,OAAMK,KAAK,EAAC;QACVC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAACF,KAAK,CAAC;MACpD;IACJ,CAAC;IACDQ,OAAO,CAAC,CAAC;EACb,CAAC,EAAC,EAAE,CAAC;EAELf,SAAS,CAAC,MAAI;IACV;IACA,IAAGE,EAAE,EAAC;MACF,MAAMc,aAAa,GAAG,MAAAA,CAAA,KAAW;QAC7B,MAAMV,IAAI,GAAG,MAAML,eAAe,CAACC,EAAE,CAAC;QACtCY,eAAe,CAACR,IAAI,CAAC;MACzB,CAAC;MACDU,aAAa,CAAC,CAAC;IACnB;EACJ,CAAC,EAAC,CAACd,EAAE,CAAC,CAAC;EAEP,OAAO;IAACW;EAAY,CAAC;AAEzB,CAAC;AAAAF,EAAA,CA9BKD,UAAU;AAAAO,EAAA,GAAVP,UAAU;AA+BhB,eAAeA,UAAU;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}